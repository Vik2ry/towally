// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Country {
  AFGHANISTAN
  ALBANIA
  ALGERIA
  ANDORRA
  ANGOLA
  ANTIGUA_AND_BARBUDA
  ARGENTINA
  ARMENIA
  AUSTRALIA
  AUSTRIA
  AZERBAIJAN
  BAHAMAS
  BAHRAIN
  BANGLADESH
  BARBADOS
  BELARUS
  BELGIUM
  BELIZE
  BENIN
  BHUTAN
  BOLIVIA
  BOSNIA_AND_HERZEGOVINA
  BOTSWANA
  BRAZIL
  BRUNEI
  BULGARIA
  BURKINA_FASO
  BURUNDI
  CABO_VERDE
  CAMBODIA
  CAMEROON
  CANADA
  CENTRAL_AFRICAN_REPUBLIC
  CHAD
  CHILE
  CHINA
  COLOMBIA
  COMOROS
  CONGO
  COSTA_RICA
  CROATIA
  CUBA
  CYPRUS
  CZECH_REPUBLIC
  DENMARK
  DJIBOUTI
  DOMINICA
  DOMINICAN_REPUBLIC
  ECUADOR
  EGYPT
  EL_SALVADOR
  EQUATORIAL_GUINEA
  ERITREA
  ESTONIA
  ESWATINI
  ETHIOPIA
  FIJI
  FINLAND
  FRANCE
  GABON
  GAMBIA
  GEORGIA
  GERMANY
  GHANA
  GREECE
  GRENADA
  GUATEMALA
  GUINEA
  GUINEA_BISSAU
  GUYANA
  HAITI
  HONDURAS
  HUNGARY
  ICELAND
  INDIA
  INDONESIA
  IRAN
  IRAQ
  IRELAND
  ISRAEL
  ITALY
  JAMAICA
  JAPAN
  JORDAN
  KAZAKHSTAN
  KENYA
  KIRIBATI
  KOSOVO
  KUWAIT
  KYRGYZSTAN
  LAOS
  LATVIA
  LEBANON
  LESOTHO
  LIBERIA
  LIBYA
  LIECHTENSTEIN
  LITHUANIA
  LUXEMBOURG
  MADAGASCAR
  MALAWI
  MALAYSIA
  MALDIVES
  MALI
  MALTA
  MARSHALL_ISLANDS
  MAURITANIA
  MAURITIUS
  MEXICO
  MICRONESIA
  MOLDOVA
  MONACO
  MONGOLIA
  MONTENEGRO
  MOROCCO
  MOZAMBIQUE
  MYANMAR
  NAMIBIA
  NAURU
  NEPAL
  NETHERLANDS
  NEW_ZEALAND
  NICARAGUA
  NIGER
  NIGERIA
  NORTH_KOREA
  NORTH_MACEDONIA
  NORWAY
  OMAN
  PAKISTAN
  PALAU
  PALESTINE
  PANAMA
  PAPUA_NEW_GUINEA
  PARAGUAY
  PERU
  PHILIPPINES
  POLAND
  PORTUGAL
  QATAR
  ROMANIA
  RUSSIA
  RWANDA
  SAINT_KITTS_AND_NEVIS
  SAINT_LUCIA
  SAINT_VINCENT_AND_THE_GRENADINES
  SAMOA
  SAN_MARINO
  SAO_TOME_AND_PRINCIPE
  SAUDI_ARABIA
  SENEGAL
  SERBIA
  SEYCHELLES
  SIERRA_LEONE
  SINGAPORE
  SLOVAKIA
  SLOVENIA
  SOLOMON_ISLANDS
  SOMALIA
  SOUTH_AFRICA
  SOUTH_KOREA
  SOUTH_SUDAN
  SPAIN
  SRI_LANKA
  SUDAN
  SURINAME
  SWEDEN
  SWITZERLAND
  SYRIA
  TAIWAN
  TAJIKISTAN
  TANZANIA
  THAILAND
  TIMOR_LESTE
  TOGO
  TONGA
  TRINIDAD_AND_TOBAGO
  TUNISIA
  TURKEY
  TURKMENISTAN
  TUVALU
  UGANDA
  UKRAINE
  UNITED_ARAB_EMIRATES
  UNITED_KINGDOM
  UNITED_STATES
  URUGUAY
  UZBEKISTAN
  VANUATU
  VATICAN_CITY
  VENEZUELA
  VIETNAM
  YEMEN
  ZAMBIA
  ZIMBABWE
}

enum RoleType {
  admin
  investor
  user
}

enum Status {
  ACTIVE
  INACTIVE
}

model User {
  id        String   @id @default(uuid())
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email         String        @unique
  dob           DateTime?
  country       Country?
  zipcode       Int?
  profession    String?
  company       String?
  links         String[]
  shares        Share[]
  tagline       String?
  followers     Follow[]      @relation("UserToFollowers")
  following     Follow[]      @relation("UserToFollowing")
  transactions  Transaction[] @relation("Buyer")
  transactions2 Transaction[] @relation("Seller")
  roleType      RoleType?
  dataIncome    Float?        @default(0.00)
  FollowIncome  Float?        @default(0.00)
  FollowSpend   Float?        @default(0.00)
  status        Status?        @default(ACTIVE)
  subscription  Boolean?       @default(true)
  wallyWallet   Float?         @default(0.00)
  adminRevenue  Float?         @default(0.00)

  @@map("User")
}

model Share {
  id           String        @id @default(uuid())
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  price        Float         @default(1.0) // Price in ω
  sold         Boolean       @default(false)
  transactions Transaction[]
  // Add other fields as needed

  @@map("Share")
}

enum TransactionType {
  BUY
  SELL
}

model Transaction {
  id       String          @id @default(uuid())
  buyer    User            @relation("Buyer", fields: [buyerId], references: [id])
  buyerId  String
  seller   User            @relation("Seller", fields: [sellerId], references: [id])
  sellerId String
  share    Share           @relation(fields: [shareId], references: [id])
  shareId  String
  price    Float // Price in ω
  type     TransactionType
  // Add other fields as needed
}

model Follow {
  id          String @id @default(uuid())
  follower    User   @relation("UserToFollowers", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("UserToFollowing", fields: [followingId], references: [id])
  followingId String
  // Add other fields as needed

  @@map("Follow")
}

model CurrencyExchange {
  id       String  @id @default(uuid())
  amount   Float
  from     String
  to       String
  accepted Boolean @default(false)
  // Add other fields as needed

  @@map("CurrencyExchange")
}

model WeeklyIncome {
  id     String @id @default(uuid())
  userId String
  amount Float
  // Add other fields as needed

  @@map("WeeklyIncome")
}

model AdminAction {
  id     String @id @default(uuid())
  action String
  target String?
  value  Float?
  // Add other fields as needed

  @@map("AdminAction")
}

// Other models and enums can be defined as per the requirements
